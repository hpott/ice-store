#!/usr/bin/env python3

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
from gi.repository import Gio
from gi.repository.GdkPixbuf import Pixbuf
import os
import argparse, sys
import subprocess
from urllib.request import urlopen
import json

usingAltRepo = False

#Check for arguments
if len(sys.argv) > 1:
		parser = argparse.ArgumentParser(description='Use a seperate repository with the ice store')
		parser.add_argument('text', action='store', type=str, help='The repo(clone link) to use.')
		args = parser.parse_args()
		newRepo = args.text
		usingAltRepo = True

home = os.getenv("HOME")
iceStoreDir = "{0}/.local/share/ice-store".format(home)
#Check if using seperate repository
if usingAltRepo == False:
	if os.path.isdir(iceStoreDir) == False:
		os.makedirs(iceStoreDir)
		os.chdir(iceStoreDir)
		git = subprocess.Popen(["git", "clone", "https://github.com/borderOS/iceStoreRepo", "."])
	else:
		os.chdir(iceStoreDir)
		git = subprocess.Popen(["git", "pull", "https://github.com/borderOS/iceStoreRepo"])
else:
	#Clone specified repository
	if os.path.isdir(iceStoreDir) == False:
		os.makedirs(iceStoreDir)
		os.chdir(iceStoreDir)
		git = subprocess.Popen(["git", "clone", newRepo, "."])
	else:
		os.makedirs(iceStoreDir)
		os.system("rm -rf "+iceStoreDir)
		os.chdir(iceStoreDir)
		git = subprocess.Popen(["git", "pull", newRepo])

git.wait()

class iceStore(Gtk.Window):

	# The Window
	def __init__(self):

		# Generating Window
		Gtk.Window.__init__(self, title="Ice Store")
		self.set_default_size(360, 412)
		self.set_resizable(True)
		self.set_border_width(10)

		# Generates Tabs
		self.catagories = Gtk.Notebook()
		self.add(self.catagories) # Adds List to Window
		self.catagories.set_tab_pos(2)

		self.featuredList = Gtk.ListBox()
		self.featuredList.set_selection_mode(Gtk.SelectionMode.NONE)
		self.featuredScroll = Gtk.ScrolledWindow()
		self.featuredScroll.add(self.featuredList)
		self.catagories.append_page(self.featuredScroll)
		self.catagories.set_tab_label_text(self.featuredScroll, "Featured")

		self.accessoriesList = Gtk.ListBox()
		self.accessoriesList.set_selection_mode(Gtk.SelectionMode.NONE)
		self.accessoriesScroll = Gtk.ScrolledWindow()
		self.accessoriesScroll.add(self.accessoriesList)
		self.catagories.append_page(self.accessoriesScroll)
		self.catagories.set_tab_label_text(self.accessoriesScroll, "Accessories")

		self.gamesList = Gtk.ListBox()
		self.gamesList.set_selection_mode(Gtk.SelectionMode.NONE)
		self.gamesScroll = Gtk.ScrolledWindow()
		self.gamesScroll.add(self.gamesList)
		self.catagories.append_page(self.gamesScroll)
		self.catagories.set_tab_label_text(self.gamesScroll, "Games")

		self.graphicsList = Gtk.ListBox()
		self.graphicsList.set_selection_mode(Gtk.SelectionMode.NONE)
		self.graphicsScroll = Gtk.ScrolledWindow()
		self.graphicsScroll.add(self.graphicsList)
		self.catagories.append_page(self.graphicsScroll)
		self.catagories.set_tab_label_text(self.graphicsScroll, "Graphics")

		self.internetList = Gtk.ListBox()
		self.internetList.set_selection_mode(Gtk.SelectionMode.NONE)
		self.internetScroll = Gtk.ScrolledWindow()
		self.internetScroll.add(self.internetList)
		self.catagories.append_page(self.internetScroll)
		self.catagories.set_tab_label_text(self.internetScroll, "Internet")

		self.multimediaList = Gtk.ListBox()
		self.multimediaList.set_selection_mode(Gtk.SelectionMode.NONE)
		self.multimediaScroll = Gtk.ScrolledWindow()
		self.multimediaScroll.add(self.multimediaList)
		self.catagories.append_page(self.multimediaScroll)
		self.catagories.set_tab_label_text(self.multimediaScroll, "Multimedia")

		self.officeList = Gtk.ListBox()
		self.officeList.set_selection_mode(Gtk.SelectionMode.NONE)
		self.officeScroll = Gtk.ScrolledWindow()
		self.officeScroll.add(self.officeList)
		self.catagories.append_page(self.officeScroll)
		self.catagories.set_tab_label_text(self.officeScroll, "Office")

		self.programmingList = Gtk.ListBox()
		self.programmingList.set_selection_mode(Gtk.SelectionMode.NONE)
		self.programmingScroll = Gtk.ScrolledWindow()
		self.programmingScroll.add(self.programmingList)
		self.catagories.append_page(self.programmingScroll)
		self.catagories.set_tab_label_text(self.programmingScroll, "Programming")

		self.systemList = Gtk.ListBox()
		self.systemList.set_selection_mode(Gtk.SelectionMode.NONE)
		self.systemScroll = Gtk.ScrolledWindow()
		self.systemScroll.add(self.systemList)
		self.catagories.append_page(self.systemScroll)
		self.catagories.set_tab_label_text(self.systemScroll, "System")

		with open("repo.json") as icerepo:
			repo = json.load(icerepo)

		for ssb in repo["featured"]:
			exec("def " + ssb["id"] + """_clickedFeatured(self):
	subprocess.Popen(["ice", "--ssbname", \"""" + ssb["name"] +"\", \"--ssburl\", \"" + ssb["url"] + "\", \"--ssbicon\", \"" + iceStoreDir + "/" + ssb["id"] + "\", \"--ssbcatagory\", \"" + ssb["catagory"] + "\", \"--dialogmode\", \"True\"])")

			exec("self." + ssb["id"] + "FeaturedRow = Gtk.ListBoxRow()")
			exec("self." + ssb["id"] + "FeaturedBox = Gtk.Box()")
			exec("self." + ssb["id"] + "FeaturedGrid = Gtk.Grid()")
			exec("self." + ssb["id"] + "FeaturedGrid.set_row_spacing(3)")
			exec("self." + ssb["id"] + "FeaturedGrid.set_column_spacing(10)")
			exec("self." + ssb["id"] + "FeaturedImage = Gtk.Image()")
			exec("self." + ssb["id"] + "FeaturedPixbuf = Pixbuf.new_from_file_at_size(\"" + ssb["id"] + ".png\", 48, 48)")
			exec("self." + ssb["id"] + "FeaturedImage.set_from_pixbuf(self." + ssb["id"] + "FeaturedPixbuf)")
			exec("self." + ssb["id"] + "FeaturedGrid.attach(self." + ssb["id"] + "FeaturedImage, 1, 3, 2, 2)")
			exec("self." + ssb["id"] + "FeaturedNameLabel = Gtk.Label()")
			exec("self." + ssb["id"] + "FeaturedNameLabel.set_markup(\"<b>\" + ssb[\"name\"] + \"</b>   <small><i>(\" + ssb[\"url\"].replace(\"&\", \"&amp;\") + \")</i></small>\")")
			exec("self." + ssb["id"] + "FeaturedNameLabel.set_xalign(0.0)")
			exec("self." + ssb["id"] + "FeaturedGrid.attach(self." + ssb["id"] + "FeaturedNameLabel, 3, 3, 3, 1)")
			exec("self." + ssb["id"] + "FeaturedDescriptionLabel = Gtk.Label()")
			exec("self." + ssb["id"] + "FeaturedDescriptionLabel.set_label(ssb[\"description\"])")
			exec("self." + ssb["id"] + "FeaturedDescriptionLabel.set_xalign(0.0)")
			exec("self." + ssb["id"] + "FeaturedGrid.attach(self." + ssb["id"] + "FeaturedDescriptionLabel, 3, 4, 3, 1)")
			exec("self." + ssb["id"] + "FeaturedInstallBtn = Gtk.Button()")
			exec("self." + ssb["id"] + "FeaturedInstallBtn.set_label(\"" + ssb["price"] + "\")")
			exec("self." + ssb["id"] + "FeaturedInstallBtn.connect(\"clicked\", " + ssb["id"] + "_clickedFeatured)")
			# exec("self." + ssb["catagory"] + "ListBoxRow.connect(\"row_selected\", " + ssb["id"] + "_clicked)")
			# exec("self." + ssb["id"] + "Grid.attach(self." + ssb["id"] + "InstallBtn, 6, 3, 1, 1)")
			exec("self." + ssb["id"] + "FeaturedBox.pack_start(self." + ssb["id"] + "FeaturedGrid, True, True, 0)")
			exec("self." + ssb["id"] + "FeaturedBox.pack_start(self." + ssb["id"] + "FeaturedInstallBtn, False, False, 0)")
			exec("self." + ssb["id"] + "FeaturedRow.add(self." + ssb["id"] + "FeaturedBox)")
			exec("self.featuredList.add(self." + ssb["id"] + "FeaturedRow)")

		for ssb in repo["iceapps"]:
			exec("def " + ssb["id"] + """_clicked(self):
	subprocess.Popen(["ice", "--ssbname", \"""" + ssb["name"] +"\", \"--ssburl\", \"" + ssb["url"] + "\", \"--ssbicon\", \"" + iceStoreDir + "/" + ssb["id"] + "\", \"--ssbcatagory\", \"" + ssb["catagory"] + "\", \"--dialogmode\", \"True\"])")

			exec("self." + ssb["id"] + "Row = Gtk.ListBoxRow()")
			exec("self." + ssb["id"] + "Box = Gtk.Box()")
			exec("self." + ssb["id"] + "Grid = Gtk.Grid()")
			exec("self." + ssb["id"] + "Grid.set_row_spacing(3)")
			exec("self." + ssb["id"] + "Grid.set_column_spacing(10)")
			exec("self." + ssb["id"] + "Image = Gtk.Image()")
			exec("self." + ssb["id"] + "Pixbuf = Pixbuf.new_from_file_at_size(\"" + ssb["id"] + ".png\", 48, 48)")
			exec("self." + ssb["id"] + "Image.set_from_pixbuf(self." + ssb["id"] + "Pixbuf)")
			exec("self." + ssb["id"] + "Grid.attach(self." + ssb["id"] + "Image, 1, 3, 2, 2)")
			exec("self." + ssb["id"] + "NameLabel = Gtk.Label()")
			exec("self." + ssb["id"] + "NameLabel.set_markup(\"<b>\" + ssb[\"name\"] + \"</b>   <small><i>(\" + ssb[\"url\"].replace(\"&\", \"&amp;\") + \")</i></small>\")")
			exec("self." + ssb["id"] + "NameLabel.set_xalign(0.0)")
			exec("self." + ssb["id"] + "Grid.attach(self." + ssb["id"] + "NameLabel, 3, 3, 3, 1)")
			exec("self." + ssb["id"] + "DescriptionLabel = Gtk.Label()")
			exec("self." + ssb["id"] + "DescriptionLabel.set_label(ssb[\"description\"])")
			exec("self." + ssb["id"] + "DescriptionLabel.set_xalign(0.0)")
			exec("self." + ssb["id"] + "Grid.attach(self." + ssb["id"] + "DescriptionLabel, 3, 4, 3, 1)")
			exec("self." + ssb["id"] + "InstallBtn = Gtk.Button()")
			exec("self." + ssb["id"] + "InstallBtn.set_label(\"" + ssb["price"] + "\")")
			exec("self." + ssb["id"] + "InstallBtn.connect(\"clicked\", " + ssb["id"] + "_clicked)")
			# exec("self." + ssb["catagory"] + "ListBoxRow.connect(\"row_selected\", " + ssb["id"] + "_clicked)")
			# exec("self." + ssb["id"] + "Grid.attach(self." + ssb["id"] + "InstallBtn, 6, 3, 1, 1)")
			exec("self." + ssb["id"] + "Box.pack_start(self." + ssb["id"] + "Grid, True, True, 0)")
			exec("self." + ssb["id"] + "Box.pack_start(self." + ssb["id"] + "InstallBtn, False, False, 0)")
			exec("self." + ssb["id"] + "Row.add(self." + ssb["id"] + "Box)")
			exec("self." + ssb["catagory"] + "List.add(self." + ssb["id"] + "Row)")

mainWindow = iceStore()
mainWindow.connect("delete-event", Gtk.main_quit) # Makes the close button close the Window.
mainWindow.show_all()
Gtk.main()
#Remove files from seperate repository to stop unwanted persistence
if usingAltRepo:
	os.system("rm -rf "+iceStoreDir)
